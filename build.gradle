buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version "1.9.20"
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.20'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.20'
    id 'org.jetbrains.kotlin.kapt' version '1.9.20'
}

archivesBaseName = "tecochat"
group = 'chat.teco'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation "org.flywaydb:flyway-mysql"

    implementation 'com.theokanning.openai-gpt3-java:service:0.12.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
    testImplementation 'io.kotest.extensions:kotest-extensions-spring:1.1.2'
    testImplementation 'com.ninja-squad:springmockk:4.0.2'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.20'
    runtimeOnly 'org.jetbrains.kotlin:kotlin-reflect:1.9.20'

    // QueryDSL 설정
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    kapt("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}

test {
    maxHeapSize = "1024m"
}
